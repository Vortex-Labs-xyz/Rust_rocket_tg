name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.12"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Debug Python environment
      run: |
        python --version
        python -c "import sys; print('Python executable:', sys.executable)"
        python -c "import sys; print('Python path:', sys.path)"

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: 1.8.4
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Debug Poetry
      run: |
        poetry --version
        poetry config --list

    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v4
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}

    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root

    - name: Install package
      run: poetry install --no-interaction

    - name: Debug installed packages
      run: |
        poetry show
        ls -la rustrocket_x/

    - name: Run black
      run: poetry run black --check .

    - name: Run ruff
      run: poetry run ruff check .

    - name: Test 1 - Simple pytest run
      run: poetry run pytest -v --tb=short
      continue-on-error: true

    - name: Test 2 - Test discovery only
      run: poetry run pytest --collect-only
      continue-on-error: true

    - name: Test 3 - Single test file
      run: poetry run pytest tests/test_cli.py -v
      continue-on-error: true

    - name: Test 4 - No coverage
      run: poetry run pytest tests/ -v
      continue-on-error: true

    - name: Test 5 - Working directory check
      run: |
        pwd
        ls -la
        poetry run python -c "import os; print('CWD:', os.getcwd())"
        poetry run pytest --version

    - name: Test 6 - With coverage (original)
      run: poetry run pytest --cov=rustrocket_x --cov-report=xml -v

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false 